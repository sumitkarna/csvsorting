/**
 * 
 */
package com.hm.csvsorter;

import java.io.IOException;
import java.io.Reader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Logger;

import com.opencsv.CSVReader;
import com.opencsv.CSVReaderBuilder;

/**
 * @author Sumit Karna
 *
 */
public class CsvSorter {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// if (args.length!= 2 )
		// throw new IllegalArgumentException("This needs two csv files");

		String CSV1__PATH = "C://sumit/csvsorterhm/csv1.csv"; // args[0];
		String CSV2_PATH = "C://sumit/csvsorterhm/csv2.csv";// args[1];
		List<String[]> records ;
		List<String[]> columnd ;
		try (Reader reader = Files.newBufferedReader(Paths.get(CSV1__PATH), StandardCharsets.UTF_8);
				CSVReader csvReader = new CSVReaderBuilder(reader).withSkipLines(1).build();
				Reader reader1 = Files.newBufferedReader(Paths.get(CSV2_PATH), StandardCharsets.UTF_8);
				CSVReader csvReader1 = new CSVReaderBuilder(reader1).withSkipLines(1).build();

		) {
			
			{
	            // Reading Records One by One in a String array
	            String[] nextRecord;
	            while ((nextRecord = csvReader.readNext()) != null) {
	                System.out.println("Name : " + nextRecord[0]);
	                System.out.println("Email : " + nextRecord[1]);
	                System.out.println("Phone : " + nextRecord[2]);
	            }
	        }
			 records = csvReader.readAll();
			columnd= csvReader1.readAll();
		} catch (IOException e) {
			System.out.println("Please make sure both files exist");
		}

//		Integer csv1[][] = { records.0.1, { 2, 3, 2 }, { 3, 4, 1 } };
//		Integer csv2[] = { 6, 4, 3, 2, 1, 5 };
		
		    String[][] r = new String[records.size()][];
		    int i = 0;
		    for (String[] record : records) {
		       r[i++] = record.toArray(new String[record.size()]);
		    }

		int index = 1;

		int rows = csv1.length;
		int cols = csv1[0].length;

		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
		HashMap<Integer, Integer> reverseMap = new HashMap<Integer, Integer>();
		for (int i : csv2) {
			map.put(csv2[i], i);
			reverseMap.put(i, csv2[i]);
		}

		for (int i = 0; i < rows; i++) {
			csv1[i][index] = map.get(csv1[i][index]);
		}

		ArrayList<ArrayList<Integer>> al = new ArrayList<ArrayList<Integer>>();
		for (int i = 0; i < rows; i++) {
			al.add(new ArrayList<Integer>(Arrays.asList(csv1[i])));
		}

		IntegerArrayComparator lComparator = new IntegerArrayComparator(index);
		Collections.sort(al, lComparator);

		for (int i = 0; i < rows; i++) {
			for (int j = 0; j < cols; j++) {
				csv1[i][j] = al.get(i).get(j);
			}
		}

		for (int i = 0; i < rows; i++) {
			csv1[i][index] = reverseMap.get(csv1[i][index]);
		}

		for (int i = 0; i < rows; i++) {
			System.out.println(Arrays.asList(csv1[i]));
		}

	}

	public static class IntegerArrayComparator implements Comparator<List<Integer>> {

		int index = 0;

		public IntegerArrayComparator(int index) {
			this.index = index;
		}

		public int compare(List<Integer> o1, List<Integer> o2) {
			return o1.get(index).compareTo(o2.get(index));
		}

	}

}
